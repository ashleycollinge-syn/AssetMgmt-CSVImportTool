# This will be used to import the csvs generated by the powershell script: AssetMgmt
# into either sql or a "master" csv file
import os, csv, logging, shutil

LOG_FILE_LOCATION = "work\\log.log"
WORK_FOLDER = "work"
WORK_FOLDER_TODO = "work\\todo"

logging.basicConfig(filename=LOG_FILE_LOCATION,level=logging.INFO)

def get_list_of_csvs():
    """
    go through the work\todo directory and return a list
    of paths to the files
    """
    csv_file_paths = []
    for filename in os.listdir(WORK_FOLDER_TODO):
        if filename.endswith(".csv"): 
            csv_file_paths.append(filename)
    return csv_file_paths

def import_csv_file(file_path):
    """
    go through the csv file and return the values that are
    contained
    """
    values = {}
    with open(file_path, 'rt') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=',', quotechar='|')
        for row in spamreader:
            print(row)
            try:
                if row[0] == "Username":
                    values['Username'] = row[1]
                if row[0] == "ProcessorModel":
                    values['ProcessorModel'] = row[1]
                if row[0] == "Model":
                    values['Model'] = row[1]
                if row[0] == "MemoryCapacity":
                    values['MemoryCapacity'] = row[1]
                if row[0] == "MaxClockSpeed":
                    values['MaxClockSpeed'] = row[1]
                if row[0] == "ServicePackVer":
                    values['ServicePackVer'] = row[1]
                if row[0] == "IsLaptop":
                    values['IsLaptop'] = row[1]
                if row[0] == "ComputerName":
                    values['ComputerName'] = row[1]
                if row[0] == "SerialNumber":
                    values['SerialNumber'] = row[1]
                if row[0] == "OperatingSystem":
                    values['OperatingSystem'] = row[1]
                if row[0] == "Manufacturer":
                    values['Manufacturer'] = row[1]
                if row[0] == "NumberOfLogicalProcessors":
                    values['NumberOfLogicalProcessors'] = row[1]
                if row[0] == "NumberOfCores":
                    values['NumberOfCores'] = row[1]
            except IndexError:
                print("Error")
    return values

def error_on_file(file):
    """
    there was an error, so we need to log it and move the file
    to the error folder for a better look, also don't import it 
    into the master csv file
    """
    logging.error("Error on {}".format(file))
    shutil.move("work\\todo\\{}".format(file), "work\\errors\\{}".format(file))


def validate_values(values):
    """
    return true if all of the values required are contained
    in the dict provided, returns false if one or more is
    missing
    """
    if not "Username" in values.keys():
        return False
    if not "ProcessorModel" in values.keys():
        return False
    if not "Model" in values.keys():
        return False
    if not "MemoryCapacity" in values.keys():
        return False
    if not "MaxClockSpeed" in values.keys():
        return False
    if not "ServicePackVer" in values.keys():
        return False
    if not "IsLaptop" in values.keys():
        return False
    if not "ComputerName" in values.keys():
        return False
    if not "SerialNumber" in values.keys():
        return False
    if not "OperatingSystem" in values.keys():
        return False
    if not "Manufacturer" in values.keys():
        return False
    if not "NumberOfLogicalProcessors" in values.keys():
        return False
    if not "NumberOfCores" in values.keys():
        return False
    return True

def add_to_the_master(values):
    """
    append the dict to the end of the master csv file
    """
    keys = values[0].keys()
    with open('master.csv', 'wt', newline='') as output_file:
        dict_writer = csv.DictWriter(output_file, keys)
        dict_writer.writeheader()
        dict_writer.writerows(values)

asset_information_filepaths = get_list_of_csvs()
validated_csv_information = []
for file in asset_information_filepaths:
    # run for each csv file
    csv_information = import_csv_file("work\\todo\\" + file)
    if validate_values(csv_information):
        # validated successfully
        print("1")
        print(csv_information)
        shutil.move("work\\todo\\{}".format(file), "work\\successful\\{}".format(file))
        validated_csv_information.append(csv_information)
    else:
        # not all values were present
        error_on_file(file)
add_to_the_master(validated_csv_information)
